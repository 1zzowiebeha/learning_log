from io import BytesIO
import os
from pathlib import PurePath

from django.db import models
from django.contrib.auth.models import User
from django.core.validators import validate_image_file_extension

from PIL import Image
from django.core.files import File
from django.core.files.storage import FileSystemStorage
from django.conf import settings

PROFILE_IMAGE_FOLDER = "profile_images"

class OverwriteFileStorage(FileSystemStorage):
    def get_available_name(self, name, max_length=None):
        """File Storage that removes the old file
        so that we can make a new one (overwrite it)."""
        # bug: diff file extensions are uploaded as diff files.
        # remove based on file name, not filename + extension
        # also, store user profiles with a UUID, and get urls and stuff
        # based on the uuid
        
        # https://stackoverflow.com/questions/5722899/django-remove-currently-in-an-image-edit-form-and-replace-it-with-the-actual
        if self.exists(name):
            os.remove(os.path.join(settings.MEDIA_ROOT, name))
        return name
    
    #def save(name, content, max_length=None):
    #    """Convert the File contents to PNG format,
    #    and strip exif data."""
    #    new_name = 
    
def get_file_path(instance, filename):
    """Get a file path where the filename is a User's username,
    and give it the correct file extension."""
    #ext = filename.split('.')[-1]
    username = instance.user.username
    filename = f"{username}.png"
    
    return os.path.join("profile_images", filename)

def process_image(image: models.ImageField, username: str) -> None:
    """Convert image to PNG and strip exif data from an image file."""  
    # https://bhch.github.io/posts/2018/12/django-how-to-editmanipulate-uploaded-images-on-the-fly-before-saving/
      
    im = Image.open(image)
    
    final_image_io = BytesIO() # create a BytesIO object
    
    pixel_data = list(im.getdata())
    im_without_exif = Image.new(im.mode, im.size)
    im_without_exif.putdata(pixel_data)
    
    if im_without_exif.mode != 'RGBA':
        im_without_exif = im_without_exif.convert('RGBA')
        
        
    # save new image to BytesIO object
    # PNG supports alpha, which is why we use it
    im_without_exif.save(fp=final_image_io, format='PNG', quality=85)
    
    im_without_exif = Image.open(final_image_io)
    
    print(im_without_exif.format, im_without_exif.mode)
    
    # as a good practice, close the file handler after saving the image.
    im_without_exif.close()

    
    media_relative_path = os.path.split(image.path)[-2:]
    dirname = media_relative_path[0]
    filename = media_relative_path[1]
    #filename_without_ext = '.'.join(filename.split('.')[:-1])
    #new_name = f"{dirname}/{filename_without_ext}.png"
    
    #print(f"New_name: {new_name}")
    
    # WARNING:
    # Dunno what the use of name arg is here, as it's a representation
    #   of file data.
    new_image = File(final_image_io) # create a django friendly File object

    # Delete the old image (may be a diff type)
    filepath = settings.MEDIA_ROOT / dirname / filename
    if os.path.exists(filepath):
        os.remove(filepath)
            
    return new_image

class UserProfile(models.Model):
    """A social profile for a user."""
    user = models.OneToOneField(to=User,
                                on_delete=models.CASCADE)
    profile_image = models.ImageField(
        upload_to=get_file_path,
        default='profile_images/default_profile_image.jpg',
        storage=OverwriteFileStorage(),
    )
    bio_text = models.CharField(max_length=500,
                                blank=True)
    is_public = models.BooleanField(default=True)
    friends = models.ManyToManyField(to="self",
                                     blank=True)
    
    class Meta:
        ordering = ["user__username"]
        
    def __str__(self):
        return f"{self.user.username}'s profile"
    
    def save(self, *args, **kwargs):
        if self.profile_image.name != 'profile_images/default_profile_image.jpg':
            self.image = process_image(self.profile_image, self.user.username)

        super().save(*args, **kwargs)
        
        
I have a settings view that allows a user to change their
profile image. I want to convert the image they upload into
PNG format, and strip the EXIF data before I display this image on the site.

The problem is that the image doesn't save in the correct format.
If I check the BytesIO format (open it as a Pillow image), it is PNG.
But if I check the image in my media folder with a hex editor, it still
shows the format it was uploaded with.
I'm not sure what I need to do in order to fix it.

Note: it is a little messy. I'll probably refactor this into the storage class.