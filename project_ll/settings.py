"""
Django settings for project_ll project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

import django

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
]

INTERNAL_IPS = ["127.0.0.1"]


# Application definition
INSTALLED_APPS = [
    # My apps (placed first so we can override default behaviors if desired)
    'learning_logs.apps.LearningLogsConfig',
    'stats.apps.StatsConfig',
    'accounts.apps.AccountsConfig',

    # Third-party apps
    'tz_detect',
    'django_bootstrap5',

    # Default django apps
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    'tz_detect.middleware.TimezoneMiddleware',
]

ROOT_URLCONF = 'project_ll.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project_ll.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Detroit'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = 'static/'
MEDIA_URL = 'media/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


########
# Auth #
########

# Used to redirect the user once they login.
# Also used to redirect authenticated users who access
#   the login page, if a "next" GET or POST value
#   is not provided.
LOGIN_REDIRECT_URL = "learning_logs:index"
# Used to redirect the user once they logout
LOGOUT_REDIRECT_URL = "learning_logs:index"
# Used to redirect the user when authentication fails (@login_required)
LOGIN_URL = "accounts:login"

########################
# Platform.sh settings #
########################

# We normally place import statements at the beginning of a module, but
#   in this case, it's helpful to keep all the
#   remote-specific settings in one section.

import os
import json
import base64
import sys

# Helper function for decoding base64-encoded JSON variables.
def decode(variable):
    """Decodes a Platform.sh environment variable.
    Args:
        variable (string):
            Base64-encoded JSON (the content of an environment variable).
    Returns:
        An dict (if representing a JSON object), or a scalar type.
    Raises:
        JSON decoding error.
    """
    try:
        if sys.version_info[1] > 5:
            return json.loads(base64.b64decode(variable))
        else:
            return json.loads(base64.b64decode(variable).decode('utf-8'))
    except json.decoder.JSONDecodeError:
        print(f'Error decoding JSON, code %d', json.decoder.JSONDecodeError)


ENABLE_ADMIN_SITE_IN_PROD = False

# This variable must always match the primary database relationship name,
#   configured in .platform.app.yaml.
PLATFORMSH_DB_RELATIONSHIP="database"

# import platformshconfig
# config = platformshconfig.Config()

# The following block is only applied within Platform.sh environments
# That is, only when this Platform.sh variable is defined.
if (os.getenv('PLATFORM_APPLICATION_NAME') is not None):
    ALLOWED_HOSTS.append('.platformsh.site')
    
    if ENABLE_ADMIN_SITE_IN_PROD:
        INSTALLED_APPS.append('django.contrib.admin')
        
    DEBUG = False
    
    # Ensure cookie is sent only with an HTTPS connection.
    CSRF_COOKIE_SECURE = True 
    # Ensure cookie is sent only with an HTTPS connection.
    # Prevenst packet sniffers from getting unencrypted session cookies & hijacking
    #   a user's session.
    SESSION_COOKIE_SECURE = True
    # Redirect all non-https requests to https.
    SECURE_SSL_REDIRECT = True
    
    # WARNING: read this before you uncomment these settings:
    # https://hstspreload.org/
    #SECURE_HSTS_SECONDS = 3600 # for preload eligibility, set to 31536000
    #SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    #SECURE_HSTS_PRELOAD = True
    
    # Redefine the static root based on the project's directory on Platform.sh
    if (os.getenv('PLATFORM_APP_DIR') is not None):
        STATIC_ROOT = os.path.join(os.getenv('PLATFORM_APP_DIR'), 'static')
        
    # PLATFORM_PROJECT_ENTROPY is unique to your project
    # Use it to define define Django's SECRET_KEY
    if (os.getenv('PLATFORM_PROJECT_ENTROPY') is not None):
        SECRET_KEY = os.getenv('PLATFORM_PROJECT_ENTROPY')
        
    # Database service configuration: post-build only,
    #   as services aren't available during the build.
    if (os.getenv('PLATFORM_ENVIRONMENT') is not None):
        platformRelationships = decode(os.getenv('PLATFORM_RELATIONSHIPS'))
        db_settings = platformRelationships[PLATFORMSH_DB_RELATIONSHIP][0]

        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': db_settings['path'],
                'USER': db_settings['username'],
                'PASSWORD': db_settings['password'],
                'HOST': db_settings['host'],
                'PORT': db_settings['port'],
            },
        }
        
# Not a platform.sh environment (treat it as a development env):
else:
    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 'django-insecure-ftqr10uckxsw+xx2#$i1wd5q%19u3+mm*p+pwhy40$ttr+&2ui'

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = False
    
    # Enable the admin panel:
    INSTALLED_APPS.append('django.contrib.admin')
    
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

    STATIC_ROOT = BASE_DIR / 'static'